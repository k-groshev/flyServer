import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'http://repo.spring.io/milestone' }
    }
    dependencies {
        classpath 'com.ofg:uptodate-gradle-plugin:+'
        classpath 'org.ajoberstar:gradle-git:1.4.2'

//    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:1.0.2'
//    classpath "org.sonarqube.gradle:gradle-sonarqube-plugin:1.0"
    }
}

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'

mainClassName = "net.groshev.rest.SparkRoutes"

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'
configurations { providedCompile }

configurations {
    provided
    compile.extendsFrom provided
}

sourceSets {
    main { compileClasspath += configurations.provided }
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

configurations.all {
    exclude group: "commons-logging", module: "commons-logging"
}

dependencies {
    compile(
            "commons-fileupload:commons-fileupload:$commonsFileUploadVersiion",
            "org.glassfish.jersey.core:jersey-client:$jerseyVersion",
            "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion",
            "commons-codec:commons-codec:$commonsCodecVersion",
            "log4j:log4j:$log4jVersion",

            "com.github.stephenc.high-scale-lib:high-scale-lib:1.1.4",
            "com.jcraft:jzlib:1.1.3",
            "org.xerial:sqlite-jdbc:3.8.9",
            "com.datastax.cassandra:cassandra-driver-core:3.0.0",
            "com.datastax.cassandra:cassandra-driver-mapping:3.0.0",
            "com.datastax.cassandra:cassandra-driver-extras:3.0.0",
            "ch.qos.logback:logback-classic:$logbackVersion",
            "ch.qos.logback:logback-core:$logbackVersion",
            "com.sparkjava:spark-core:$javaSparkVersion"
    )

    runtime(
            "log4j:log4j:$log4jVersion",
            "org.slf4j:slf4j-api:$slf4jVersion",
            "org.slf4j:jcl-over-slf4j:$slf4jVersion",
            "org.slf4j:log4j-over-slf4j:$slf4jVersion",
            "ch.qos.logback:logback-classic:$logbackVersion",
            //"org.codehaus.groovy:groovy-all:$groovyVersion",
            "ch.qos.logback:logback-core:$logbackVersion",
            "com.sparkjava:spark-core:$javaSparkVersion"
    )

    testCompile(
            "junit:junit:$junitVersion",
            "org.mockito:mockito-all:$mokitoVersion",
            "org.codehaus.groovy:groovy-all:$groovyVersion",
            "com.jayway.restassured:rest-assured:$restAssuredVersion",
            "com.jayway.restassured:spring-mock-mvc:$restAssuredVersion"
    )

    provided(
            "org.projectlombok:lombok:$lombokVersion"
    )
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
//  archives javadocJar
}

task addHashFile << {
    ext.repo = org.ajoberstar.grgit.Grgit.open("${project.rootDir}")
    def headCommit = repo.head()
    def status = repo.status()
    def tags = repo.tag.list()
    def remotes = repo.remote.list()
    ext.gitBranch = repo.branch.current.name
    ext.gitCommitId = headCommit.id
    ext.gitCommitIdAbbrev = headCommit.getAbbreviatedId(7)
    if (!status.isClean()) {
        ext.gitCommitIdDesc = headCommit.abbreviatedId + '-dirty'
        ext.gitCommitIdDescShort = headCommit.abbreviatedId + '-dirty'
    } else {
        ext.gitCommitIdDesc = headCommit.abbreviatedId
        ext.gitCommitIdDescShort = headCommit.abbreviatedId
    }
    ext.gitCommitMessageFull = headCommit.fullMessage.replaceAll("\\r\\n|\\r|\\n", "\\\\n")
    ext.gitCommitMessageShort = headCommit.shortMessage
    ext.gitCommitTime = new Date(headCommit.time * 1000L).format("dd.MM.yyyy @ HH\\:mm\\:ss z")
    SimpleDateFormat dateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy", Locale.ENGLISH);
    ext.gitNowTime = dateFormat.format(new Date())
    ext.gitCommitUserEmail = headCommit.author.email
    ext.gitCommitUserName = headCommit.author.name
    ext.gitBuildTime = new Date().format("dd.MM.yyyy @ HH\\:mm\\:ss z")
    ext.gitDirty = !status.isClean()
    ext.gitBuildUserName = repo.repository.jgit.repo.config.getString('user', null, 'name')
    ext.gitBuildUserEmail = repo.repository.jgit.repo.config.getString('user', null, 'email')
    ext.gitTags = ''
    tags.each { t ->
        ext.gitTags = ext.gitTags + "$t.fullName" + ',';
    }
    ext.gitROURL = ''
    repo.remote.list().each { w ->
        if ("origin" == "$w.name") {
            if (ext.gitROURL == '') {
                ext.gitROURL = ext.gitROURL + "$w.url".replace(":", "\\:")
            } else {
                ext.gitROURL = ext.gitROURL + "$w.url".replace(":", "\\:") + ','
            }
        }
    }

    File resourcesMainDir = new File(project.buildDir, 'resources/main')
    if (!resourcesMainDir.exists()) {
        resourcesMainDir.mkdirs()
    }
    File gitPropertiesFile = new File(resourcesMainDir, 'git.properties')
    if (!gitPropertiesFile.exists()) {
        gitPropertiesFile.createNewFile()
    }

    def keys = ["git.tags"
                , "git.commit.id"
                , "git.commit.id.abbrev"
                , "git.commit.id.describe"
                , "git.commit.id.describe-short"
                , "git.commit.message.full"
                , "git.commit.message.short"
                , "git.commit.user.name"
                , "git.commit.user.email"
                , "git.commit.time"
                , "git.build.user.name"
                , "git.build.user.email"
                , "git.build.time"
                , "git.branch"
                , "git.dirty"
                , "git.remote.origin.url"]


    def map = ["git.tags"                      : "${gitTags}"
               , "git.commit.id"               : "${gitCommitId}"
               , "git.commit.id.abbrev"        : "${gitCommitIdAbbrev}"
               , "git.commit.id.describe"      : "${gitCommitIdDesc}"
               , "git.commit.id.describe-short": "${gitCommitIdDescShort}"
               , "git.commit.message.full"     : "${gitCommitMessageFull}"
               , "git.commit.message.short"    : "${gitCommitMessageShort}"
               , "git.commit.user.name"        : "${gitCommitUserName}"
               , "git.commit.user.email"       : "${gitCommitUserEmail}"
               , "git.commit.time"             : "${gitCommitTime}"
               , "git.build.user.name"         : "${gitBuildUserName}"
               , "git.build.user.email"        : "${gitBuildUserEmail}"
               , "git.build.time"              : "${gitBuildTime}"
               , "git.branch"                  : "${gitBranch}"
               , "git.dirty"                   : "${gitDirty}"
               , "git.remote.origin.url"       : "${gitROURL}"]

    gitPropertiesFile.withWriter('UTF-8') { w ->
        w.writeLine "#Generated by gradle with love"
        w.writeLine "#${gitNowTime}"
        map.subMap(keys).each { key, value ->
            w.writeLine "$key=$value"
        }
    }
}


jar {
    dependsOn 'addHashFile'
    baseName = "service"
    version = "1.0-SNAPSHOT"
    manifest {
        attributes 'Main-Class': 'net.groshev.rest.SparkRoutes'
    }
}

sourceSets.main.compileClasspath += configurations.providedCompile
sourceSets.test.compileClasspath += configurations.providedCompile
sourceSets.test.runtimeClasspath += configurations.providedCompile

jacoco {
    toolVersion = "0.7.5.201505241946"
    reportsDir = file("$buildDir/reports/jacoco")
}


test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination "${buildDir}/reports/jacocoHtml"
    }
}

/*
task prod << {
    bootRun.systemProperty 'spring.profiles.active', 'prod'
}

task mac << {
    bootRun.systemProperty 'spring.profiles.active', 'mac'
}

task dev << {
    bootRun.systemProperty 'spring.profiles.active', 'dev'
}*/
